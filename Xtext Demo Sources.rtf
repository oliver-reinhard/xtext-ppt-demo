{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red42\green0\blue255;\red171\green48\blue0;\red127\green0\blue85;
\red100\green100\blue100;\red125\green125\blue125;\red0\green0\blue192;}
{\*\expandedcolortbl;;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c67059\c18824\c0;\csgenericrgb\c49804\c0\c33333;
\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c49020\c49020\c49020;\csgenericrgb\c0\c0\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18880\viewh15800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 Model:\
	(contents+=SlideContent\
	| presentations+=Presentation\
	| themes+=Theme)*;\
\
SlideContent:\
	\cf2 'content'\cf0  \cf3 name\cf0 =ID \cf2 '\{'\cf0 \
	\cf2 'text'\cf0  text=STRING\
	(\cf2 'note'\cf0  note=STRING)?\
	\cf2 '\}'\cf0 ;\
\
Presentation:\
	\cf2 'presentation'\cf0  \cf3 name\cf0 =ID \cf2 '\{'\cf0 \
	\cf2 'theme'\cf0  theme=[
\f1\i Theme
\f0\i0 ]\
	(\cf2 'slide'\cf0  slides+=[
\f1\i SlideContent
\f0\i0 ])*\
	\cf2 '\}'\cf0 ;\
\
Theme:\
	\cf2 'theme'\cf0  \cf3 name\cf0 =ID \cf2 '\{'\cf0 \
	(\cf2 'background'\cf0  background=Color)?\
	(\cf2 'header'\cf0  header=STRING)?\
	(\cf2 'footer'\cf0  footer=STRING)?\
	\cf2 '\}'\cf0 ;\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf4 enum
\f0\b0 \cf0  Color:\
	WHITE=\cf2 'white'\cf0  | GREY=\cf2 'grey'\cf0 ;\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
	\cf5 @Check\cf0 \
	
\f2\b \cf4 def
\f0\b0 \cf0  checkSlideReferencesByPresentation(Presentation presentation) \{\
		
\f2\b \cf4 val
\f0\b0 \cf0  map = Maps.
\f1\i newHashMap
\f0\i0 \
		
\f2\b \cf4 for
\f0\b0 \cf0 (slide : presentation.slides) \{\
			
\f2\b \cf4 var
\f0\b0 \cf0  count = map.get(slide)\
			
\f2\b \cf4 if
\f0\b0 \cf0  (count === 
\f2\b \cf4 null
\f0\b0 \cf0 )  count = \cf6 0\cf0 \
			map.put(slide, count+\cf6 1\cf0 )\
		\}\
		
\f2\b \cf4 for
\f0\b0 \cf0 (i : \cf6 0\cf0  ..< presentation.slides.size) \{\
			
\f2\b \cf4 val
\f0\b0 \cf0  slide = presentation.slides.get(i)\
			
\f2\b \cf4 if
\f0\b0 \cf0  (map.get(slide) > \cf6 1\cf0 ) \{\
				warning(\cf2 "Slide is contained in presentation more than once"\cf0 , presentation, AbpptPackage.
\f1\i \cf7 eINSTANCE
\f0\i0 \cf0 .presentation_Slides, i)\
			\}\
		\}\
	\}\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
package org.xtext.example.abppt.generator\
\
import com.google.common.collect.Lists\
import java.awt.Color\
import java.awt.Rectangle\
import java.io.File\
import java.io.FileOutputStream\
import org.apache.poi.xslf.usermodel.XMLSlideShow\
import org.eclipse.core.resources.ResourcesPlugin\
import org.eclipse.emf.ecore.resource.Resource\
import org.eclipse.xtext.generator.AbstractGenerator\
import org.eclipse.xtext.generator.IFileSystemAccess2\
import org.eclipse.xtext.generator.IGeneratorContext\
import org.xtext.example.abppt.abppt.Model\
import org.xtext.example.abppt.abppt.Presentation\
\
/**\
 * Generates code from your model files on save.\
 * \
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation\
 */\
class AbpptGenerator extends AbstractGenerator \{\
\
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) \{\
		val model = resource.contents.head as Model\
		if(model.presentations !== null) \{\
			for (p : model.presentations) \{\
				generatePresentation(p, fsa, context)\
			\}\
		\}\
	\}\
\
	def void generatePresentation(Presentation presentation, IFileSystemAccess2 fsa, IGeneratorContext context) \{\
		// see https://www.baeldung.com/apache-poi-slideshow\
		var fontColor = Color.blue\
		var bgColor = Color.white\
		if (presentation.theme.background == org.xtext.example.abppt.abppt.Color.GREY) \{\
			bgColor = Color.darkGray\
			fontColor = Color.white\
		\}\
		val ppt = new XMLSlideShow\
		for (slide : presentation.slides) \{\
			val pptSlide = ppt.createSlide\
			if (presentation.theme.background == org.xtext.example.abppt.abppt.Color.GREY) \{\
				pptSlide.background.fillColor = bgColor\
			\}\
			val shape = pptSlide.createTextBox\
			shape.setAnchor(new Rectangle(100, 100, 600, 200));\
			val p = shape.addNewTextParagraph\
			val r = p.addNewTextRun\
			r.text = slide.name + " \'96 " + slide.text\
			r.fontColor = fontColor\
			r.fontSize = 48.0\
			shape.resizeToFitText\
		\}\
		\
		val os = new FileOutputStream(getOutputPath(presentation, fsa));\
		ppt.write(os)\
		os.close\
	\}\
	\
	def File getOutputPath(Presentation presentation, IFileSystemAccess2 fsa) \{val location = ResourcesPlugin.getWorkspace().getRoot().getLocation()\
		val uri = fsa.getURI(presentation.name + ".pptx")\
		val segments = Lists.newArrayList(uri.segmentsList)\
		segments.remove(0)\
		val path = new File(location.toFile, segments.join("/"))\
		return path\
	\}\
\}\
}