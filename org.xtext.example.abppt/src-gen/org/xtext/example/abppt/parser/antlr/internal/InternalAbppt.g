/*
 * generated by Xtext 2.16.0
 */
grammar InternalAbppt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.abppt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.abppt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.abppt.services.AbpptGrammarAccess;

}

@parser::members {

 	private AbpptGrammarAccess grammarAccess;

    public InternalAbpptParser(TokenStream input, AbpptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AbpptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getContentsSlideContentParserRuleCall_0_0());
				}
				lv_contents_0_0=ruleSlideContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"contents",
						lv_contents_0_0,
						"org.xtext.example.abppt.Abppt.SlideContent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPresentationsPresentationParserRuleCall_1_0());
				}
				lv_presentations_1_0=rulePresentation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"presentations",
						lv_presentations_1_0,
						"org.xtext.example.abppt.Abppt.Presentation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getThemesThemeParserRuleCall_2_0());
				}
				lv_themes_2_0=ruleTheme
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"themes",
						lv_themes_2_0,
						"org.xtext.example.abppt.Abppt.Theme");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleSlideContent
entryRuleSlideContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSlideContentRule()); }
	iv_ruleSlideContent=ruleSlideContent
	{ $current=$iv_ruleSlideContent.current; }
	EOF;

// Rule SlideContent
ruleSlideContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='content'
		{
			newLeafNode(otherlv_0, grammarAccess.getSlideContentAccess().getContentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSlideContentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSlideContentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSlideContentAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='text'
		{
			newLeafNode(otherlv_3, grammarAccess.getSlideContentAccess().getTextKeyword_3());
		}
		(
			(
				lv_text_4_0=RULE_STRING
				{
					newLeafNode(lv_text_4_0, grammarAccess.getSlideContentAccess().getTextSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSlideContentRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_5='note'
			{
				newLeafNode(otherlv_5, grammarAccess.getSlideContentAccess().getNoteKeyword_5_0());
			}
			(
				(
					lv_note_6_0=RULE_STRING
					{
						newLeafNode(lv_note_6_0, grammarAccess.getSlideContentAccess().getNoteSTRINGTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSlideContentRule());
						}
						setWithLastConsumed(
							$current,
							"note",
							lv_note_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getSlideContentAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRulePresentation
entryRulePresentation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPresentationRule()); }
	iv_rulePresentation=rulePresentation
	{ $current=$iv_rulePresentation.current; }
	EOF;

// Rule Presentation
rulePresentation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='presentation'
		{
			newLeafNode(otherlv_0, grammarAccess.getPresentationAccess().getPresentationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPresentationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPresentationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPresentationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='theme'
		{
			newLeafNode(otherlv_3, grammarAccess.getPresentationAccess().getThemeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPresentationRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getPresentationAccess().getThemeThemeCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5='slide'
			{
				newLeafNode(otherlv_5, grammarAccess.getPresentationAccess().getSlideKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPresentationRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getPresentationAccess().getSlidesSlideContentCrossReference_5_1_0());
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPresentationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTheme
entryRuleTheme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThemeRule()); }
	iv_ruleTheme=ruleTheme
	{ $current=$iv_ruleTheme.current; }
	EOF;

// Rule Theme
ruleTheme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='theme'
		{
			newLeafNode(otherlv_0, grammarAccess.getThemeAccess().getThemeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getThemeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThemeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getThemeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='background'
			{
				newLeafNode(otherlv_3, grammarAccess.getThemeAccess().getBackgroundKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getThemeAccess().getBackgroundColorEnumRuleCall_3_1_0());
					}
					lv_background_4_0=ruleColor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getThemeRule());
						}
						set(
							$current,
							"background",
							lv_background_4_0,
							"org.xtext.example.abppt.Abppt.Color");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='header'
			{
				newLeafNode(otherlv_5, grammarAccess.getThemeAccess().getHeaderKeyword_4_0());
			}
			(
				(
					lv_header_6_0=RULE_STRING
					{
						newLeafNode(lv_header_6_0, grammarAccess.getThemeAccess().getHeaderSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getThemeRule());
						}
						setWithLastConsumed(
							$current,
							"header",
							lv_header_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_7='footer'
			{
				newLeafNode(otherlv_7, grammarAccess.getThemeAccess().getFooterKeyword_5_0());
			}
			(
				(
					lv_footer_8_0=RULE_STRING
					{
						newLeafNode(lv_footer_8_0, grammarAccess.getThemeAccess().getFooterSTRINGTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getThemeRule());
						}
						setWithLastConsumed(
							$current,
							"footer",
							lv_footer_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getThemeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='white'
			{
				$current = grammarAccess.getColorAccess().getWHITEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getWHITEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='grey'
			{
				$current = grammarAccess.getColorAccess().getGREYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getGREYEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
