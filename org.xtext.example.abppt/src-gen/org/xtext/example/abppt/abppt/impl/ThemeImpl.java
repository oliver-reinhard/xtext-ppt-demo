/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.abppt.abppt.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.abppt.abppt.AbpptPackage;
import org.xtext.example.abppt.abppt.Color;
import org.xtext.example.abppt.abppt.Theme;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Theme</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.ThemeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.ThemeImpl#getBackground <em>Background</em>}</li>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.ThemeImpl#getHeader <em>Header</em>}</li>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.ThemeImpl#getFooter <em>Footer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ThemeImpl extends MinimalEObjectImpl.Container implements Theme
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getBackground() <em>Background</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBackground()
   * @generated
   * @ordered
   */
  protected static final Color BACKGROUND_EDEFAULT = Color.WHITE;

  /**
   * The cached value of the '{@link #getBackground() <em>Background</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBackground()
   * @generated
   * @ordered
   */
  protected Color background = BACKGROUND_EDEFAULT;

  /**
   * The default value of the '{@link #getHeader() <em>Header</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeader()
   * @generated
   * @ordered
   */
  protected static final String HEADER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHeader() <em>Header</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeader()
   * @generated
   * @ordered
   */
  protected String header = HEADER_EDEFAULT;

  /**
   * The default value of the '{@link #getFooter() <em>Footer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFooter()
   * @generated
   * @ordered
   */
  protected static final String FOOTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFooter() <em>Footer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFooter()
   * @generated
   * @ordered
   */
  protected String footer = FOOTER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ThemeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AbpptPackage.Literals.THEME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.THEME__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Color getBackground()
  {
    return background;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBackground(Color newBackground)
  {
    Color oldBackground = background;
    background = newBackground == null ? BACKGROUND_EDEFAULT : newBackground;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.THEME__BACKGROUND, oldBackground, background));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHeader()
  {
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHeader(String newHeader)
  {
    String oldHeader = header;
    header = newHeader;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.THEME__HEADER, oldHeader, header));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFooter()
  {
    return footer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFooter(String newFooter)
  {
    String oldFooter = footer;
    footer = newFooter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.THEME__FOOTER, oldFooter, footer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AbpptPackage.THEME__NAME:
        return getName();
      case AbpptPackage.THEME__BACKGROUND:
        return getBackground();
      case AbpptPackage.THEME__HEADER:
        return getHeader();
      case AbpptPackage.THEME__FOOTER:
        return getFooter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AbpptPackage.THEME__NAME:
        setName((String)newValue);
        return;
      case AbpptPackage.THEME__BACKGROUND:
        setBackground((Color)newValue);
        return;
      case AbpptPackage.THEME__HEADER:
        setHeader((String)newValue);
        return;
      case AbpptPackage.THEME__FOOTER:
        setFooter((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AbpptPackage.THEME__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AbpptPackage.THEME__BACKGROUND:
        setBackground(BACKGROUND_EDEFAULT);
        return;
      case AbpptPackage.THEME__HEADER:
        setHeader(HEADER_EDEFAULT);
        return;
      case AbpptPackage.THEME__FOOTER:
        setFooter(FOOTER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AbpptPackage.THEME__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AbpptPackage.THEME__BACKGROUND:
        return background != BACKGROUND_EDEFAULT;
      case AbpptPackage.THEME__HEADER:
        return HEADER_EDEFAULT == null ? header != null : !HEADER_EDEFAULT.equals(header);
      case AbpptPackage.THEME__FOOTER:
        return FOOTER_EDEFAULT == null ? footer != null : !FOOTER_EDEFAULT.equals(footer);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", background: ");
    result.append(background);
    result.append(", header: ");
    result.append(header);
    result.append(", footer: ");
    result.append(footer);
    result.append(')');
    return result.toString();
  }

} //ThemeImpl
