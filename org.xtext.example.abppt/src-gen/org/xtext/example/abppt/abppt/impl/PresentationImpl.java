/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.abppt.abppt.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.abppt.abppt.AbpptPackage;
import org.xtext.example.abppt.abppt.Presentation;
import org.xtext.example.abppt.abppt.SlideContent;
import org.xtext.example.abppt.abppt.Theme;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Presentation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.PresentationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.PresentationImpl#getTheme <em>Theme</em>}</li>
 *   <li>{@link org.xtext.example.abppt.abppt.impl.PresentationImpl#getSlides <em>Slides</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PresentationImpl extends MinimalEObjectImpl.Container implements Presentation
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTheme() <em>Theme</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTheme()
   * @generated
   * @ordered
   */
  protected Theme theme;

  /**
   * The cached value of the '{@link #getSlides() <em>Slides</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlides()
   * @generated
   * @ordered
   */
  protected EList<SlideContent> slides;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PresentationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AbpptPackage.Literals.PRESENTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.PRESENTATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Theme getTheme()
  {
    if (theme != null && theme.eIsProxy())
    {
      InternalEObject oldTheme = (InternalEObject)theme;
      theme = (Theme)eResolveProxy(oldTheme);
      if (theme != oldTheme)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AbpptPackage.PRESENTATION__THEME, oldTheme, theme));
      }
    }
    return theme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Theme basicGetTheme()
  {
    return theme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTheme(Theme newTheme)
  {
    Theme oldTheme = theme;
    theme = newTheme;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbpptPackage.PRESENTATION__THEME, oldTheme, theme));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SlideContent> getSlides()
  {
    if (slides == null)
    {
      slides = new EObjectResolvingEList<SlideContent>(SlideContent.class, this, AbpptPackage.PRESENTATION__SLIDES);
    }
    return slides;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AbpptPackage.PRESENTATION__NAME:
        return getName();
      case AbpptPackage.PRESENTATION__THEME:
        if (resolve) return getTheme();
        return basicGetTheme();
      case AbpptPackage.PRESENTATION__SLIDES:
        return getSlides();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AbpptPackage.PRESENTATION__NAME:
        setName((String)newValue);
        return;
      case AbpptPackage.PRESENTATION__THEME:
        setTheme((Theme)newValue);
        return;
      case AbpptPackage.PRESENTATION__SLIDES:
        getSlides().clear();
        getSlides().addAll((Collection<? extends SlideContent>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AbpptPackage.PRESENTATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AbpptPackage.PRESENTATION__THEME:
        setTheme((Theme)null);
        return;
      case AbpptPackage.PRESENTATION__SLIDES:
        getSlides().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AbpptPackage.PRESENTATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AbpptPackage.PRESENTATION__THEME:
        return theme != null;
      case AbpptPackage.PRESENTATION__SLIDES:
        return slides != null && !slides.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PresentationImpl
