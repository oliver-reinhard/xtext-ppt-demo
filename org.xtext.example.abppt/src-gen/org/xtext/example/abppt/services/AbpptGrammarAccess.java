/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.abppt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AbpptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abppt.Abppt.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cContentsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cContentsSlideContentParserRuleCall_0_0 = (RuleCall)cContentsAssignment_0.eContents().get(0);
		private final Assignment cPresentationsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPresentationsPresentationParserRuleCall_1_0 = (RuleCall)cPresentationsAssignment_1.eContents().get(0);
		private final Assignment cThemesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cThemesThemeParserRuleCall_2_0 = (RuleCall)cThemesAssignment_2.eContents().get(0);
		
		//Model:
		//	(contents+=SlideContent
		//	| presentations+=Presentation
		//	| themes+=Theme)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(contents+=SlideContent | presentations+=Presentation | themes+=Theme)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//contents+=SlideContent
		public Assignment getContentsAssignment_0() { return cContentsAssignment_0; }
		
		//SlideContent
		public RuleCall getContentsSlideContentParserRuleCall_0_0() { return cContentsSlideContentParserRuleCall_0_0; }
		
		//presentations+=Presentation
		public Assignment getPresentationsAssignment_1() { return cPresentationsAssignment_1; }
		
		//Presentation
		public RuleCall getPresentationsPresentationParserRuleCall_1_0() { return cPresentationsPresentationParserRuleCall_1_0; }
		
		//themes+=Theme
		public Assignment getThemesAssignment_2() { return cThemesAssignment_2; }
		
		//Theme
		public RuleCall getThemesThemeParserRuleCall_2_0() { return cThemesThemeParserRuleCall_2_0; }
	}
	public class SlideContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abppt.Abppt.SlideContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextSTRINGTerminalRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNoteKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNoteAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNoteSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cNoteAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SlideContent:
		//	'content' name=ID '{'
		//	'text' text=STRING ('note' note=STRING)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'content' name=ID '{' 'text' text=STRING ('note' note=STRING)? '}'
		public Group getGroup() { return cGroup; }
		
		//'content'
		public Keyword getContentKeyword_0() { return cContentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'text'
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }
		
		//text=STRING
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_4_0() { return cTextSTRINGTerminalRuleCall_4_0; }
		
		//('note' note=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'note'
		public Keyword getNoteKeyword_5_0() { return cNoteKeyword_5_0; }
		
		//note=STRING
		public Assignment getNoteAssignment_5_1() { return cNoteAssignment_5_1; }
		
		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_5_1_0() { return cNoteSTRINGTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abppt.Abppt.Presentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThemeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThemeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cThemeThemeCrossReference_4_0 = (CrossReference)cThemeAssignment_4.eContents().get(0);
		private final RuleCall cThemeThemeIDTerminalRuleCall_4_0_1 = (RuleCall)cThemeThemeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSlideKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSlidesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSlidesSlideContentCrossReference_5_1_0 = (CrossReference)cSlidesAssignment_5_1.eContents().get(0);
		private final RuleCall cSlidesSlideContentIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSlidesSlideContentCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Presentation:
		//	'presentation' name=ID '{'
		//	'theme' theme=[Theme] ('slide' slides+=[SlideContent])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'presentation' name=ID '{' 'theme' theme=[Theme] ('slide' slides+=[SlideContent])* '}'
		public Group getGroup() { return cGroup; }
		
		//'presentation'
		public Keyword getPresentationKeyword_0() { return cPresentationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'theme'
		public Keyword getThemeKeyword_3() { return cThemeKeyword_3; }
		
		//theme=[Theme]
		public Assignment getThemeAssignment_4() { return cThemeAssignment_4; }
		
		//[Theme]
		public CrossReference getThemeThemeCrossReference_4_0() { return cThemeThemeCrossReference_4_0; }
		
		//ID
		public RuleCall getThemeThemeIDTerminalRuleCall_4_0_1() { return cThemeThemeIDTerminalRuleCall_4_0_1; }
		
		//('slide' slides+=[SlideContent])*
		public Group getGroup_5() { return cGroup_5; }
		
		//'slide'
		public Keyword getSlideKeyword_5_0() { return cSlideKeyword_5_0; }
		
		//slides+=[SlideContent]
		public Assignment getSlidesAssignment_5_1() { return cSlidesAssignment_5_1; }
		
		//[SlideContent]
		public CrossReference getSlidesSlideContentCrossReference_5_1_0() { return cSlidesSlideContentCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSlidesSlideContentIDTerminalRuleCall_5_1_0_1() { return cSlidesSlideContentIDTerminalRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ThemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abppt.Abppt.Theme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThemeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBackgroundKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBackgroundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBackgroundColorEnumRuleCall_3_1_0 = (RuleCall)cBackgroundAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHeaderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHeaderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cHeaderAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFooterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFooterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFooterSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cFooterAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Theme:
		//	'theme' name=ID '{' ('background' background=Color)? ('header' header=STRING)? ('footer' footer=STRING)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'theme' name=ID '{' ('background' background=Color)? ('header' header=STRING)? ('footer' footer=STRING)? '}'
		public Group getGroup() { return cGroup; }
		
		//'theme'
		public Keyword getThemeKeyword_0() { return cThemeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('background' background=Color)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'background'
		public Keyword getBackgroundKeyword_3_0() { return cBackgroundKeyword_3_0; }
		
		//background=Color
		public Assignment getBackgroundAssignment_3_1() { return cBackgroundAssignment_3_1; }
		
		//Color
		public RuleCall getBackgroundColorEnumRuleCall_3_1_0() { return cBackgroundColorEnumRuleCall_3_1_0; }
		
		//('header' header=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'header'
		public Keyword getHeaderKeyword_4_0() { return cHeaderKeyword_4_0; }
		
		//header=STRING
		public Assignment getHeaderAssignment_4_1() { return cHeaderAssignment_4_1; }
		
		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_4_1_0() { return cHeaderSTRINGTerminalRuleCall_4_1_0; }
		
		//('footer' footer=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'footer'
		public Keyword getFooterKeyword_5_0() { return cFooterKeyword_5_0; }
		
		//footer=STRING
		public Assignment getFooterAssignment_5_1() { return cFooterAssignment_5_1; }
		
		//STRING
		public RuleCall getFooterSTRINGTerminalRuleCall_5_1_0() { return cFooterSTRINGTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abppt.Abppt.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWHITEWhiteKeyword_0_0 = (Keyword)cWHITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREYGreyKeyword_1_0 = (Keyword)cGREYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Color:
		//	WHITE='white' | GREY='grey';
		public EnumRule getRule() { return rule; }
		
		//WHITE='white' | GREY='grey'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WHITE='white'
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_0() { return cWHITEEnumLiteralDeclaration_0; }
		
		//'white'
		public Keyword getWHITEWhiteKeyword_0_0() { return cWHITEWhiteKeyword_0_0; }
		
		//GREY='grey'
		public EnumLiteralDeclaration getGREYEnumLiteralDeclaration_1() { return cGREYEnumLiteralDeclaration_1; }
		
		//'grey'
		public Keyword getGREYGreyKeyword_1_0() { return cGREYGreyKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final SlideContentElements pSlideContent;
	private final PresentationElements pPresentation;
	private final ThemeElements pTheme;
	private final ColorElements eColor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AbpptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSlideContent = new SlideContentElements();
		this.pPresentation = new PresentationElements();
		this.pTheme = new ThemeElements();
		this.eColor = new ColorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.abppt.Abppt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(contents+=SlideContent
	//	| presentations+=Presentation
	//	| themes+=Theme)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SlideContent:
	//	'content' name=ID '{'
	//	'text' text=STRING ('note' note=STRING)?
	//	'}';
	public SlideContentElements getSlideContentAccess() {
		return pSlideContent;
	}
	
	public ParserRule getSlideContentRule() {
		return getSlideContentAccess().getRule();
	}
	
	//Presentation:
	//	'presentation' name=ID '{'
	//	'theme' theme=[Theme] ('slide' slides+=[SlideContent])*
	//	'}';
	public PresentationElements getPresentationAccess() {
		return pPresentation;
	}
	
	public ParserRule getPresentationRule() {
		return getPresentationAccess().getRule();
	}
	
	//Theme:
	//	'theme' name=ID '{' ('background' background=Color)? ('header' header=STRING)? ('footer' footer=STRING)?
	//	'}';
	public ThemeElements getThemeAccess() {
		return pTheme;
	}
	
	public ParserRule getThemeRule() {
		return getThemeAccess().getRule();
	}
	
	//enum Color:
	//	WHITE='white' | GREY='grey';
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
