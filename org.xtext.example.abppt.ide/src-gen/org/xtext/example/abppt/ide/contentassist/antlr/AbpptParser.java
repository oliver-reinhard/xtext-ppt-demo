/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.abppt.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.abppt.ide.contentassist.antlr.internal.InternalAbpptParser;
import org.xtext.example.abppt.services.AbpptGrammarAccess;

public class AbpptParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AbpptGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AbpptGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
			builder.put(grammarAccess.getSlideContentAccess().getGroup(), "rule__SlideContent__Group__0");
			builder.put(grammarAccess.getSlideContentAccess().getGroup_5(), "rule__SlideContent__Group_5__0");
			builder.put(grammarAccess.getPresentationAccess().getGroup(), "rule__Presentation__Group__0");
			builder.put(grammarAccess.getPresentationAccess().getGroup_5(), "rule__Presentation__Group_5__0");
			builder.put(grammarAccess.getThemeAccess().getGroup(), "rule__Theme__Group__0");
			builder.put(grammarAccess.getThemeAccess().getGroup_3(), "rule__Theme__Group_3__0");
			builder.put(grammarAccess.getThemeAccess().getGroup_4(), "rule__Theme__Group_4__0");
			builder.put(grammarAccess.getThemeAccess().getGroup_5(), "rule__Theme__Group_5__0");
			builder.put(grammarAccess.getModelAccess().getContentsAssignment_0(), "rule__Model__ContentsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getPresentationsAssignment_1(), "rule__Model__PresentationsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getThemesAssignment_2(), "rule__Model__ThemesAssignment_2");
			builder.put(grammarAccess.getSlideContentAccess().getNameAssignment_1(), "rule__SlideContent__NameAssignment_1");
			builder.put(grammarAccess.getSlideContentAccess().getTextAssignment_4(), "rule__SlideContent__TextAssignment_4");
			builder.put(grammarAccess.getSlideContentAccess().getNoteAssignment_5_1(), "rule__SlideContent__NoteAssignment_5_1");
			builder.put(grammarAccess.getPresentationAccess().getNameAssignment_1(), "rule__Presentation__NameAssignment_1");
			builder.put(grammarAccess.getPresentationAccess().getThemeAssignment_4(), "rule__Presentation__ThemeAssignment_4");
			builder.put(grammarAccess.getPresentationAccess().getSlidesAssignment_5_1(), "rule__Presentation__SlidesAssignment_5_1");
			builder.put(grammarAccess.getThemeAccess().getNameAssignment_1(), "rule__Theme__NameAssignment_1");
			builder.put(grammarAccess.getThemeAccess().getBackgroundAssignment_3_1(), "rule__Theme__BackgroundAssignment_3_1");
			builder.put(grammarAccess.getThemeAccess().getHeaderAssignment_4_1(), "rule__Theme__HeaderAssignment_4_1");
			builder.put(grammarAccess.getThemeAccess().getFooterAssignment_5_1(), "rule__Theme__FooterAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AbpptGrammarAccess grammarAccess;

	@Override
	protected InternalAbpptParser createParser() {
		InternalAbpptParser result = new InternalAbpptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AbpptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AbpptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
