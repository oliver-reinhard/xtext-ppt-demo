/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.pptx.generator

import com.google.common.collect.Lists
import java.awt.Color
import java.awt.Rectangle
import java.io.File
import java.io.FileOutputStream
import org.apache.poi.xslf.usermodel.XMLSlideShow
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.pptx.pptx.Model
import org.xtext.example.pptx.pptx.Presentation

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PptxGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as Model
		if(model.presentations !== null) {
			for (p : model.presentations) {
				generatePresentation(p, fsa, context)
			}
		}
	}

	def void generatePresentation(Presentation presentation, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// see https://www.baeldung.com/apache-poi-slideshow
		var fontColor = Color.blue
		var bgColor = Color.white
		if (presentation.theme.background == org.xtext.example.pptx.pptx.Color.GREY) {
			bgColor = Color.darkGray
			fontColor = Color.white
		}
		val ppt = new XMLSlideShow
		for (slide : presentation.slides) {
			val pptSlide = ppt.createSlide
			if (presentation.theme.background == org.xtext.example.pptx.pptx.Color.GREY) {
				pptSlide.background.fillColor = bgColor
			}
			val shape = pptSlide.createTextBox
			shape.setAnchor(new Rectangle(100, 100, 600, 200));
			val p = shape.addNewTextParagraph
			val r = p.addNewTextRun
			r.text = slide.name + " â€“ " + slide.text
			r.fontColor = fontColor
			r.fontSize = 48.0
			shape.resizeToFitText
		}
		
		val os = new FileOutputStream(getOutputPath(presentation, fsa));
		ppt.write(os)
		os.close
	}
	
	def File getOutputPath(Presentation presentation, IFileSystemAccess2 fsa) {val location = ResourcesPlugin.getWorkspace().getRoot().getLocation()
		val uri = fsa.getURI(presentation.name + ".pptx")
		val segments = Lists.newArrayList(uri.segmentsList)
		segments.remove(0)
		val path = new File(location.toFile, segments.join("/"))
		return path
	}
}
