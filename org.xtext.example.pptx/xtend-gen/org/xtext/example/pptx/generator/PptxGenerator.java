/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.pptx.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import java.awt.Color;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import org.apache.poi.xslf.usermodel.XMLSlideShow;
import org.apache.poi.xslf.usermodel.XSLFBackground;
import org.apache.poi.xslf.usermodel.XSLFSlide;
import org.apache.poi.xslf.usermodel.XSLFTextBox;
import org.apache.poi.xslf.usermodel.XSLFTextParagraph;
import org.apache.poi.xslf.usermodel.XSLFTextRun;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.pptx.pptx.Model;
import org.xtext.example.pptx.pptx.Presentation;
import org.xtext.example.pptx.pptx.SlideContent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PptxGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    EList<Presentation> _presentations = model.getPresentations();
    boolean _tripleNotEquals = (_presentations != null);
    if (_tripleNotEquals) {
      EList<Presentation> _presentations_1 = model.getPresentations();
      for (final Presentation p : _presentations_1) {
        this.generatePresentation(p, fsa, context);
      }
    }
  }
  
  public void generatePresentation(final Presentation presentation, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      Color fontColor = Color.blue;
      Color bgColor = Color.white;
      org.xtext.example.pptx.pptx.Color _background = presentation.getTheme().getBackground();
      boolean _equals = Objects.equal(_background, org.xtext.example.pptx.pptx.Color.GREY);
      if (_equals) {
        bgColor = Color.darkGray;
        fontColor = Color.white;
      }
      final XMLSlideShow ppt = new XMLSlideShow();
      EList<SlideContent> _slides = presentation.getSlides();
      for (final SlideContent slide : _slides) {
        {
          final XSLFSlide pptSlide = ppt.createSlide();
          org.xtext.example.pptx.pptx.Color _background_1 = presentation.getTheme().getBackground();
          boolean _equals_1 = Objects.equal(_background_1, org.xtext.example.pptx.pptx.Color.GREY);
          if (_equals_1) {
            XSLFBackground _background_2 = pptSlide.getBackground();
            _background_2.setFillColor(bgColor);
          }
          final XSLFTextBox shape = pptSlide.createTextBox();
          Rectangle _rectangle = new Rectangle(100, 100, 600, 200);
          shape.setAnchor(_rectangle);
          final XSLFTextParagraph p = shape.addNewTextParagraph();
          final XSLFTextRun r = p.addNewTextRun();
          String _name = slide.getName();
          String _plus = (_name + " â€“ ");
          String _text = slide.getText();
          String _plus_1 = (_plus + _text);
          r.setText(_plus_1);
          r.setFontColor(fontColor);
          r.setFontSize(Double.valueOf(48.0));
          shape.resizeToFitText();
        }
      }
      File _outputPath = this.getOutputPath(presentation, fsa);
      final FileOutputStream os = new FileOutputStream(_outputPath);
      ppt.write(os);
      os.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public File getOutputPath(final Presentation presentation, final IFileSystemAccess2 fsa) {
    final IPath location = ResourcesPlugin.getWorkspace().getRoot().getLocation();
    String _name = presentation.getName();
    String _plus = (_name + ".pptx");
    final URI uri = fsa.getURI(_plus);
    final ArrayList<String> segments = Lists.<String>newArrayList(uri.segmentsList());
    segments.remove(0);
    File _file = location.toFile();
    String _join = IterableExtensions.join(segments, "/");
    final File path = new File(_file, _join);
    return path;
  }
}
